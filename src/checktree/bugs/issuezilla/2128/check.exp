#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_root_access_needs

# define test's name and run level descriptions
set check_name            "xauthority_issue"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)  "check if XAUTHORITY is set in job"
set check_description(1)  "do qsh on each host"


# define test's dependencies
set check_needs           "init_core_system display_test" 

# setup and cleanup functions
set check_setup_function xauthority_issue_setup
set check_cleanup_function xauthority_issue_cleanup



# define test's procedure order
set check_functions ""
lappend check_functions "xauthority_issue_test1"

global xauthority_issue_test_hosts

# -------- local test procedures: initialization------------------------------


proc xauthority_issue_setup {} {
   global ts_config xauthority_issue_test_hosts

   set xauthority_issue_test_hosts $ts_config(execd_nodes)

   set mytestenv(XAUTHORITY) "test"
   set mytestenv(MY_OWN_TESTSUITE_ENVIRONMENT) "env_test"

   foreach host $xauthority_issue_test_hosts {
      shutdown_system_daemon $host execd
      startup_execd $host mytestenv
   }
   wait_for_load_from_all_queues 60
}

proc xauthority_issue_cleanup {} {
   global ts_config xauthority_issue_test_hosts

   foreach host $xauthority_issue_test_hosts {
      shutdown_system_daemon $host execd
      startup_execd $host
   }
   wait_for_load_from_all_queues 60
}


proc xauthority_issue_test1 {} {
   global xauthority_issue_test_hosts
   global ts_config CHECK_ACT_LEVEL
   global ts_user_config

   if {$CHECK_ACT_LEVEL == 0} {
      set error_text ""
      set success_text ""
      foreach host $xauthority_issue_test_hosts {
         set ok 1
         ts_log_fine "checking for correct test setup on host $host ..."
         set output [start_sge_bin "qrsh" "-q all.q@$host env | grep MY_OWN_TESTSUITE_ENVIRONMENT" $ts_config(master_host)]
         if {[string match "*MY_OWN_TESTSUITE_ENVIRONMENT*" $output]} {
            ts_log_fine "test is setup correctly!"
         } else {
            append error_text "host: $host\n"
            append error_text "===========\n"
            append error_text "in qrsh job output on host $host was no MY_OWN_TESTSUITE_ENVIRONMENT env set!"
            set ok 0

            # get additional information
            set output [start_sge_bin "qrsh" "-q all.q@$host hostname" $ts_config(master_host)]
            append error_text "info: qrsh -q all.q@$host hostname returned:\n$output"
         }

         ts_log_fine "checking for XAUTHORITY set in job environment on host $host ..."
         set output [start_sge_bin "qrsh" "-q all.q@$host env | grep XAUTHORITY" $ts_config(master_host)]
         if {[string match "*XAUTHORITY*" $output]} {
            append error_text "host: $host\n"
            append error_text "===========\n"
            append error_text "found XAUTHORITY environment setting in qrsh job output on host $host! issue 2128 detected!"
            append error_text "qrsh output:\n$output\n"
            set ok 0
         }
         if {$ok} {
            append success_text "test was ok for host $host\n"
         }
      }
      if {$error_text != ""} {
         ts_log_severe "$error_text\n$success_text"
      }
   }

   if {$CHECK_ACT_LEVEL == 1} {
      foreach host $xauthority_issue_test_hosts {
         submit_wait_type_job "qsh" $host $ts_user_config(second_foreign_user)
      }
   }
}


