#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2024 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__



# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_root_access_needs

set check_root_access_needs "no"

# define test's name and run level descriptions
set check_name            "generic_module_tests"
set check_category        "MODULE VERIFIED COMMLIB"
set check_description(0)   "run all generic module tests on master host"
set check_description(100) "run all generic module tests on all architectures"

# define test's dependencies
set check_needs           "" 

# setup and cleanup functions
set check_cleanup_level_function "generic_module_tests_cleanup"
set check_setup_level_function "generic_module_tests_setup"

# define test's procedure order
set check_functions ""
lappend check_functions "generic_module_tests_run"

global generic_module_tests_test_hosts generic_module_tests

# these are the currently existing and verified module tests
set generic_module_tests ""
lappend generic_module_tests "test_category"
lappend generic_module_tests "test_cull_hash"
lappend generic_module_tests "test_cull_list"
lappend generic_module_tests "test_cull_pack"
lappend generic_module_tests "test_enumeration"
lappend generic_module_tests "test_sge_calendar"
lappend generic_module_tests "test_sge_object"
lappend generic_module_tests "test_eval_expression"
lappend generic_module_tests "test_eval_performance"
lappend generic_module_tests "test_resource_utilization"
lappend generic_module_tests "test_sge_resource_quota"
lappend generic_module_tests "test_sge_load_formula"
lappend generic_module_tests "test_sge_uidgid"
lappend generic_module_tests "test_threads"
lappend generic_module_tests "test_flatfile_spool"
lappend generic_module_tests "test_commlib_issue"
lappend generic_module_tests "test_sge_lock_fifo"
lappend generic_module_tests "test_sge_err"
lappend generic_module_tests "test_sge_sl"
lappend generic_module_tests "test_sge_tq"
lappend generic_module_tests "test_sge_string"


proc generic_module_tests_setup {} {
   global ts_config
   global CHECK_ACT_LEVEL
   global generic_module_tests_test_hosts

   switch -- $CHECK_ACT_LEVEL {
      "0" {
         set generic_module_tests_test_hosts $ts_config(master_host)
      }
      "100" {
         set generic_module_tests_test_hosts $ts_config(unique_arch_nodes)
      }
   }

   ts_log_fine "test hosts: $generic_module_tests_test_hosts"
}

#****** check.60/generic_module_tests_cleanup() ********************************
#  NAME
#     generic_module_tests_cleanup() -- cleanup for module tests
#
#  SYNOPSIS
#     generic_module_tests_cleanup { } 
#
#  FUNCTION
#     Used to delete files created by module tests
#*******************************************************************************
proc generic_module_tests_cleanup {} {
   global CHECK_USER
   set exec_host [gethostname]
   set home_dir_path [get_home_dir_path $CHECK_USER $exec_host]
   set cull_pack_file_path "$home_dir_path/test_cull_pack.txt"
   ts_log_fine "checking if file \"$cull_pack_file_path\" exists ..."
   if {[is_remote_file $exec_host $CHECK_USER $cull_pack_file_path]} {
      delete_remote_file $exec_host $CHECK_USER $cull_pack_file_path
   }
}

#****** module_tests/generic_module_tests_run() ************************************
#  NAME
#     generic_module_tests_run() -- run module tests
#
#  SYNOPSIS
#     generic_module_tests_run { } 
#
#  FUNCTION
#     This test runs all supported module tests.
#*******************************************************************************
proc generic_module_tests_run {} {
   global ts_config CHECK_USER
   global generic_module_tests generic_module_tests_test_hosts

   set error_text ""
   set config_text ""
   foreach host $generic_module_tests_test_hosts {
      foreach module_test $generic_module_tests {
         ts_log_fine "starting $module_test ..."
         set output [start_test_bin $module_test "" $host $CHECK_USER ret 300]
         if {$ret == 0} {
            ts_log_fine "   => $module_test ok"
         } else {
            ts_log_fine "   => $module_test failed"
            append error_text "module test $module_test failed:\n$output\n\n"
         }
      }
   }

   if {$config_text != ""} {
      ts_log_config $config_text
   }

   if {$error_text != ""} {
      ts_log_severe $error_text
   }
}

