#___INFO__MARK_BEGIN_NEW__
#___INFO__MARK_END_NEW__

# Template for testsuite check
#
# 1) replace the following symbols by your test specific names
#    o __TESTSUITE_TEST_NAME   name of your test (e.g. consumable_test)
#      (vi: 21s)
#
# 2) set check_root_access_needs to "yes" or "no" (if you need root access)
#
# 3) set check_category
#
# 4) set check_needs (e.g.: "init_core_system" this means that this test is not
#    started without succesfull run of "init_core_system" test
#
# 5) you can add any function name to check_functions (all function (no paramters allowed) are started
#    within each runlevel number
#    PLEASE use ts_log_severe() to submit errors
#    ts_log_severe() is used in many testsuite standard functions, so not every
#    function call must check the return state.
#
# 6) set check_need_running_system != "yes" if you shutdown the qmaster in the setup(level)
#    procedures. This will skip the qmaster alive test before starting test procedures.


# define global variable in this namespace
global check_name
global check_category
global check_description
global check_needs
global check_functions
global check_root_access_needs
global check_need_running_system

#set check_root_access_needs "yes"
#set check_need_running_system "no"

# define test's name and run level descriptions
set check_name            "__TESTSUITE_TEST_NAME"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)  ""
set check_description(1)  ""

# define test's dependencies
set check_needs           "init_core_system"

# setup and cleanup functions
set check_setup_function __TESTSUITE_TEST_NAME_setup
set check_setup_level_function __TESTSUITE_TEST_NAME_setup_level
set check_cleanup_level_function __TESTSUITE_TEST_NAME_cleanup_level
set check_cleanup_function __TESTSUITE_TEST_NAME_cleanup

# define test's procedure order
set check_functions {}
lappend check_functions "__TESTSUITE_TEST_NAME_test"

# -------- local test procedures: initialization------------------------------

proc __TESTSUITE_TEST_NAME_setup {} {
   global ts_config
   global __TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup

   # let's assume we need 2 test hosts
   set __TESTSUITE_TEST_NAME_hosts [host_conf_get_suited_hosts 2]

   # we want to modify the global config - make a backup
   get_config __TESTSUITE_TEST_NAME_backup
}

proc __TESTSUITE_TEST_NAME_setup_level {} {
}

proc __TESTSUITE_TEST_NAME_cleanup_level {} {
}

proc __TESTSUITE_TEST_NAME_cleanup {} {
   global ts_config
   global __TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup

   delete_all_jobs
   wait_for_end_of_all_jobs

   # restore config if there were execd config modifications
   # reset_config_and_propagate __TESTSUITE_TEST_NAME_backup

   # standard reset config
   reset_config __TESTSUITE_TEST_NAME_backup

   # unset our test's global variables
   foreach var "__TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup" {
      unset -nocomplain $var
   }

   unset -nocomplain __TESTSUITE_TEST_NAME_hosts __TESTSUITE_TEST_NAME_backup
}


proc __TESTSUITE_TEST_NAME_test {} {
   global ts_config CHECK_USER
   global __TESTSUITE_TEST_NAME_hosts

}
