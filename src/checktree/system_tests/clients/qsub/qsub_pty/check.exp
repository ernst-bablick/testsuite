#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2011 Univa Corporation.
#
##########################################################################
#___INFO__MARK_END__

# Define the global variables to give them back
global check_name check_description check_needs check_functions
global check_category
global ts_config
global check_root_access_needs
set check_root_access_needs "yes"

# set description for each level
set check_description(0)  "check qsub pty options"

set check_name "qsub_pty"
set check_category "COMPATIBILITY SYSTEM QSUB VERIFIED"
set check_needs "init_core_system"

# setup and cleanup functions
set check_setup_function "qsub_pty_setup"
set check_cleanup_function "qsub_pty_cleanup"

# define test's procedure order
set check_functions {}
lappend check_functions "qsub_pty"
lappend check_functions "qsub_pty_no"
lappend check_functions "qsub_pty_io"

proc qsub_pty_setup {} {
   global ts_config
   global CHECK_JOB_OUTPUT_DIR
   global stored_configuration
   global job_output_dir test_host default_args default_q_args default_h_args
   global steps_per_queue size_interval

   # set some global variables
   set num_queues [llength $ts_config(unique_arch_nodes)] 
   set job_output_dir $CHECK_JOB_OUTPUT_DIR

   # run host specific tests on a random host
   set test_host [host_conf_get_suited_hosts]

   # set default job args
   set default_args "-o $job_output_dir -e $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 5"
   set qinstance [get_queue_instance "all.q" $test_host]
   set default_q_args "-q $qinstance $default_args"
   set default_h_args "-l h=${test_host} $default_args"

   # backup global config
   get_config stored_configuration
  
   # set config for fast scheduling / fast writing of accounting record
   set my_config(reporting_params) "accounting=true reporting=false flush_time=00:00:01 joblog=true sharelog=00:10:00"
   set_config my_config
}

proc qsub_pty_cleanup {} {
   global ts_config
   global stored_configuration
   global job_output_dir test_host default_args default_q_args default_h_args
   global steps_per_queue size_interval

   set spool_dir [get_spool_dir $ts_config(master_host)  "qmaster"] 
   if {[is_qmaster_alive $ts_config(master_host) $spool_dir] != 1} {
      if {[is_scheduler_alive $ts_config(master_host) $spool_dir] != 1} {
         startup_qmaster 1
      } else {
      startup_qmaster 0
      }
   }

   delete_all_jobs
   wait_for_end_of_all_jobs

   reset_config stored_configuration

   # unset our test global variables
   foreach var "stored_configuration job_output_dir test_host default_args default_q_args default_h_args steps_per_queue size_interval" {
      if {[info exists $var]} {
         unset $var
      }
   }
}

proc qsub_pty_submit_check {jobargs expect_submit_error {user ""} {host ""} {output_files 2}} {
   global ts_config CHECK_FIRST_FOREIGN_SYSTEM_USER
   global job_output_dir

   # default user is the first "foreign" user!
   if {$user == ""} {
      set user $CHECK_FIRST_FOREIGN_SYSTEM_USER
   }

   # default submit host is "any host"
   if {$host == ""} {
      set host [host_conf_get_suited_hosts]
   }

   # if we expect a submit error, submit_job shall not do error checking
   set submit_error_check 1
   if {$expect_submit_error} {
      set submit_error_check 0
   }

   # submit job and evaluate result
   set job_id [submit_job $jobargs $submit_error_check 60 $host $user]
   if {$expect_submit_error} {
      if {$job_id > 0} {
         ts_log_severe "submission of job \"$jobargs\" as user $user on host \"$host\" should have failed"
         delete_job $job_id
      }
      # are done
      return 0
   } else {
      if {$job_id < 0} {
         ts_log_severe "submission of job \"$jobargs\" as user $user on host \"$host\" failed:\nerror $job_id"
         return 0
      }
   }

   # wait for job accounting record and expect 1 or 2 ($output_files) output/error files
   set time [expr [timestamp] + 300] 
   while {[timestamp] < $time}  {
      after 1000
      set back [was_job_running $job_id 0]
      if {$back != -1} {
         set back [del_job_files $job_id $job_output_dir $output_files]
         if {$back != $output_files} {
            ts_log_severe "job $job_id (\"$jobargs\") did not produce error and output file"
            return 0
         } else {
            # job ran through successfully
            return $job_id
         }
      }
   }

   # if we get here, we didn't find an accounting record within reasonable time
   ts_log_severe "timeout waiting for job $job_id (\"$jobargs\")"

   # cleanup
   delete_job $job_id
   del_job_files $job_id $job_output_dir 2
   return 0
}
 
proc check_submit {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory
   
   # submit from every architecture
   foreach host $ts_config(unique_arch_nodes) {
      ts_log_fine "--> submit on host $host"
      qsub_pty_submit_check $default_args 0 "" $host
   }

   # submit to every architecture
   foreach host $ts_config(unique_arch_nodes) {
      ts_log_fine "--> submit to host $host"
      qsub_pty_submit_check "-l h=${host} $default_args" 0
   }
}

#****** qsub/qsub_pty() ************************************************
#  NAME
#     qsub_pty - Testcase for qsub -pty yes
#
#  SYNOPSIS
#     1. Submit tty-binary as job with -pty yes
#     2. Check if tty-binary exited with 0
#     3. Scan the output file for /dev/pts/
#
#*******************************************************************************
proc qsub_pty {} {
   global ts_config
   global CHECK_USER

   set output_tmpfile [get_tmp_file_name]
   set job_id [submit_job "-pty yes -N tty -o $output_tmpfile -e /dev/null -b y tty"]

   if {$job_id < 1} {
      return
   }

   wait_for_end_of_all_jobs

   if {[get_qacct $job_id] == 0} {
      if {$qacct_info(exit_status) != 0} {
         ts_log_severe "There was not PTY available!"
      }
   }

   set host $ts_config(master_host)
   set result [start_remote_prog $host $CHECK_USER cat $output_tmpfile exit_code]

   if {$exit_code != 0 || $result == ""} {
      ts_log_severe "error reading from output file on host $host:\n$result"
   } else {
      if {[string first "/dev/pts/" $result] != -1} {
         ts_log_fine "Found PTY in job-output"
      } else {
         ts_log_severe "No PTY was found in job-output"
      }
   }

   # clean up
   file delete $output_tmpfile
}

#****** qsub/qsub_pty_no () ********************************************
#  NAME
#     qsub_pty_no - Testcase for qsub -pty no
#
#  SYNOPSIS
#     1. Submit tty-binary as job with no pty
#     2. Check if tty-binary exited with 1
#     3. Scan the output file for /dev/pts/. Fail if available!
#
#*******************************************************************************
proc qsub_pty_no {} {
   global ts_config
   global CHECK_USER

   set output_tmpfile [get_tmp_file_name]
   set job_id [submit_job "-N tty -o $output_tmpfile -e /dev/null -b y tty"]

   if {$job_id < 1} {
      return
   }

   wait_for_jobend $job_id "tty" 60

   if {[get_qacct $job_id] == 0} {
      if {$qacct_info(exit_status) != 1} {
         ts_log_severe "There was a PTY available despite -pty no!"
      }
   }

   set host $ts_config(master_host)
   set result [start_remote_prog $host $CHECK_USER cat $output_tmpfile exit_code]

   if {$exit_code != 0 || $result == ""} {
      ts_log_severe "error reading from output file on host $host:\n$result"
   } else {
      if {[string first "/dev/pts/" $result] != -1} {
         ts_log_severe "PTY was found in job-output despite -pty no!"
      } else {
         ts_log_fine "Found no PTY in job-output"
      }
   }

   # clean up
   file delete $output_tmpfile
}

#****** qsub/qsub_pty_io () ********************************************
#  NAME
#     qsub_pty_io - Testcase for qsub -pty yes and its IO-redirection
#
#  SYNOPSIS
#     1. Generate a temporary input file with only "TESTINPUT" as content. 
#     2. Submit job with pty -yes and the generated input-file.
#     3. Scan the output file for the content of the input file and the
#        additional ouput of the test-script.
#     4. Check if output file has the right owner
#
#*******************************************************************************
proc qsub_pty_io {} {
   global ts_config
   global CHECK_USER
   global CHECK_FIRST_FOREIGN_SYSTEM_USER
   global CHECK_SECOND_FOREIGN_SYSTEM_USER

   set users [list $CHECK_USER $CHECK_FIRST_FOREIGN_SYSTEM_USER $CHECK_SECOND_FOREIGN_SYSTEM_USER]

   foreach user $users {
      set host $ts_config(master_host)
      set home_dir [get_home_dir_path $user $host]
      set time [timestamp]
      set output_tmpfile "$home_dir/qsub_pty_o$time.tmp"
      set input_tmpfile "$home_dir/qsub_pty_i$time.tmp"
      set uid [get_uid $user $host]

      ts_log_fine "Starting qsub_pty_io as user $user"
      start_remote_prog $host $user echo "TESTINPUT >> $input_tmpfile" exit_code

      if {$exit_code != 0} {
         ts_log_severe "Could not write input file"
         return
      }

      wait_for_file $input_tmpfile 10
      set job_id [submit_job "-N pty_io -o $output_tmpfile -e /dev/null -i $input_tmpfile $ts_config(testsuite_root_dir)/scripts/stdin.sh" 1 60 $host $user]

      if {$job_id < 1} {
         start_remote_prog $host $user rm $input_tmpfile
         return
      }

      wait_for_jobend $job_id "pty_io" 60 0
      wait_for_file $output_tmpfile 10

      set result [start_remote_prog $host $user cat $output_tmpfile exit_code]

      if {$exit_code != 0 || $result == ""} {
         ts_log_severe "error reading from output file on host $host:\n$result"
      } else {
         if {[string first "Output to stdout: TESTINPUT" $result] != -1} {
            ts_log_fine "Found expected output"
         } else {
            ts_log_severe "Input-file was not parsed correctly! Result was: $result"
         }
      }

      # check output-file if it has the right owner
      if {[file exists $output_tmpfile] == 1} {
         file stat $output_tmpfile file_stat
         if {$uid != $file_stat(uid)} {
            ts_log_severe "$output_tmpfile has the wrong owner! It is $uid but should be $file_stat(uid)"
         }
      } else {
         ts_log_severe "Output-file is missing"
      }

      # clean up
      start_remote_prog $host $user rm $output_tmpfile
      start_remote_prog $host $user rm $input_tmpfile
   }
}
