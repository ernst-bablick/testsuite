#___INFO__MARK_BEGIN__
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2011 Univa Corporation.
#
#  Portions of this software are Copyright (c) 2024 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

# Define the global variables to give them back
global check_name check_description check_needs check_functions
global check_category
global ts_config
global check_root_access_needs
set check_root_access_needs "yes"

# set description for each level
set check_description(0)  "check every qsub option"

set check_name         "qsub_hold"
set check_category     "COMPATIBILITY SYSTEM QSUB VERIFIED"
set check_needs        "init_core_system"

# setup and cleanup functions
set check_setup_function "qsub_setup"
set check_cleanup_function "qsub_cleanup"

# define test's procedure order
set check_functions {}
lappend check_functions "check_hold"
lappend check_functions "check_option_hold_jid"
lappend check_functions "check_qhold_jobname"
lappend check_functions "check_qsub_ts_iz_72"

proc qsub_setup {} {
   global ts_config
   global CHECK_JOB_OUTPUT_DIR
   global stored_configuration
   global job_output_dir test_host default_args default_q_args default_h_args
   global steps_per_queue size_interval

   # set some global variables
   set num_queues [llength $ts_config(unique_arch_nodes)] 
   set job_output_dir $CHECK_JOB_OUTPUT_DIR

   # run host specific tests on a random host
   set test_host [host_conf_get_suited_hosts]

   # set default jobargs
   set default_args "-o $job_output_dir -e $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 5"
   set qinstance [get_queue_instance "all.q" $test_host]
   set default_q_args "-q $qinstance $default_args"
   set default_h_args "-l h=${test_host} $default_args"

   # backup global config
   get_config stored_configuration
  
   # set config for fast scheduling / fast writing of accounting record
   set my_config(reporting_params) "accounting=true reporting=false flush_time=00:00:01 joblog=true sharelog=00:10:00"
   set_config my_config
}

proc qsub_cleanup {} {
   global ts_config
   global stored_configuration
   global job_output_dir test_host default_args default_q_args default_h_args
   global steps_per_queue size_interval

   set spool_dir [get_spool_dir $ts_config(master_host)  "qmaster"] 
   if {[is_qmaster_alive $ts_config(master_host) $spool_dir] != 1} {
      if {[is_scheduler_alive $ts_config(master_host) $spool_dir] != 1} {
         startup_qmaster 1
      } else {
      startup_qmaster 0
      }
   }

   delete_all_jobs
   wait_for_end_of_all_jobs

   reset_config stored_configuration

   # unset our test global variables
   foreach var "stored_configuration job_output_dir test_host default_args default_q_args default_h_args steps_per_queue size_interval" {
      if {[info exists $var]} {
         unset $var
      }
   }
}

proc qsub_submit_check {jobargs expect_submit_error {user ""} {host ""} {output_files 2}} {
   global ts_config CHECK_FIRST_FOREIGN_SYSTEM_USER
   global job_output_dir

   # default user is the first "foreign" user!
   if {$user == ""} {
      set user $CHECK_FIRST_FOREIGN_SYSTEM_USER
   }

   # default submit host is "any host"
   if {$host == ""} {
      set host [host_conf_get_suited_hosts]
   }

   # if we expect a submit error, submit_job shall not do error checking
   set submit_error_check 1
   if {$expect_submit_error} {
      set submit_error_check 0
   }

   # submit job and evaluate result
   set job_id [submit_job $jobargs $submit_error_check 60 $host $user]
   if {$expect_submit_error} {
      if {$job_id > 0} {
         ts_log_severe "submission of job \"$jobargs\" as user $user on host \"$host\" should have failed"
         delete_job $job_id
      }
      # are done
      return 0
   } else {
      if {$job_id < 0} {
         ts_log_severe "submission of job \"$jobargs\" as user $user on host \"$host\" failed:\nerror $job_id"
         return 0
      }
   }

   # wait for job accounting record and expect 1 or 2 ($output_files) output/error files
   set time [expr [timestamp] + 300] 
   while {[timestamp] < $time}  {
      after 1000
      set back [was_job_running $job_id 0]
      if {$back != -1} {
         set back [del_job_files $job_id $job_output_dir $output_files]
         if {$back != $output_files} {
            ts_log_severe "job $job_id (\"$jobargs\") did not produce error and output file"
            return 0
         } else {
            # job ran through successfully
            return $job_id
         }
      }
   }

   # if we get here, we didn't find an accounting record within reasonable time
   ts_log_severe "timeout waiting for job $job_id (\"$jobargs\")"

   # cleanup
   delete_job $job_id
   del_job_files $job_id $job_output_dir 2
   return 0
}
 
proc check_hold {} {
   global ts_config
   global job_output_dir test_host default_args

   set ok 1

   # first clean up output directory:  
   setup_output_directory

   set jobargs "-h $default_args"
   set result [submit_job $jobargs] 
   if {$result < 0} {
      ts_log_severe "error submitting job \"$jobargs\"\nerror $result"
   }
 
   # wait for job to get in pending state 
   if {[wait_for_jobpending $result "leeper" 200] != 0} {
      ts_log_severe "job $result is not in pending state"
      set ok 0
   }

   # job should not run within the next 2 minutes 
   if {$ok} {
      ts_log_fine "check_hold - set hold for job $result, job should not start"
      if {[wait_for_jobstart $result "leeper" 30 0] != -1} {
         ts_log_severe "job $result should not run until yet"
         set ok 0
      }
   }

   # release job
   if {$ok} {
      ts_log_fine "check_hold - ok now we release the job"
      release_job $result
   }

   # wait for job to start
   if {$ok} {
      if {[wait_for_jobstart $result "leeper" 300] == -1} {
         ts_log_severe "check_hold - job $result doesn't start"
         set ok 0
      }
   }
 
   # wait for end of job
   if {$ok} {
      if {[wait_for_jobend $result "leeper" 300 0] == -1} {
         ts_log_severe "check_hold - job $result doesn't stop"
         set ok 0
      }
   }

   # cleanup
   set back [del_job_files $result $job_output_dir 2]
   if {$back != 2} {
      ts_log_severe "job $result did not produce error and output file\njobargs: $jobargs"
   }
   if {!$ok && $result > 0} {
      delete_job $result
   }
}

proc check_option_hold_jid {} {
   global ts_config
   global default_args

   # first clean up output directory:
   setup_output_directory

   set option "-hold_jid 1,2,3"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0

   # test with job names
   set option "-hold_jid foo,bar"
   set jobargs "$option $default_args"
   qsub_submit_check $jobargs 0
}

#****** qsub/check_qsub_ts_iz_72() ***********************************************
#  NAME
#     check_qsub_ts_iz_72() -- Testcase for TS IZ 72.
#
#  SYNOPSIS
#     1. submit an array job in hold
#     2. qalter one task into system hold
#     3. qalter one task into pending state
#     4. wait until the task has finsihed
#     5. check, if the task in system hold is still there.
#
#  FUNCTION
#     Check if TS IZ 72 has been fixed.
#  INPUTS
#
#*******************************************************************************
proc check_qsub_ts_iz_72 {} {
	global ts_config

   # Delete any remaining jobs
   delete_all_jobs

   # 1. submit an array job in hold
   submit_job "-h -t 1-2 -o /dev/null -j y -N TS_IZ_72 $ts_config(product_root)/examples/jobs/sleeper.sh 15"

   # Get the jobid with qstat_plain_parse
   # qstat_plain_output contains the plain qstat output in an assoc. array
   # qstat_plain_output(jobid) contains a list of jobids.
   qstat_plain_parse qstat_plain_output
   ts_log_fine "qstat array ..."
   parray qstat_plain_output

   # Now let's compare them by jobid.
   set jobid_list $qstat_plain_output(index)
	set jobid [lindex $jobid_list 0]
   ts_log_fine "get the jobid ..."

   # 2. qalter one task into system hold
   start_sge_bin "qalter" "-h s $jobid.1"

   # 3. qalter one task into pending state
   start_sge_bin "qalter" "-h n $jobid.2"

   # 4. wait until the task has finished
   # TODO: wait_for_end_of_task ???
   # TODO: I don't understand this test at all!
   trigger_scheduling

   set my_timeout [timestamp]
   incr my_timeout 60
   while { [timestamp] < $my_timeout } {
      set states [get_job_state $jobid 1 task_id]
      set nr_of_tasks [llength $states]
      for {set i 0} {$i < $nr_of_tasks} {incr i 1} {
         ts_log_fine "task $task_id($i,task) state is \"$task_id($i,state)\""
      }
      if {$nr_of_tasks == 1} {
         ts_log_fine "task 2 finished"
         break
      }
      after 2500
   }

   after 5000   ;# wait some extra time

   # 5. check, if the task in system hold is still there.
   qstat_plain_parse qstat_plain_output1

   ts_log_fine "qstat array at the end .... \n"
   parray qstat_plain_output1

	if {$qstat_plain_output1($jobid,state) != "hqw"} {
		ts_log_severe "Task 2 not in hold state"
	} elseif {$qstat_plain_output1($jobid,jatask) == "2"} {
		ts_log_severe "Task 2 is still around"
	} elseif {$qstat_plain_output1($jobid,jatask) == "1,2"} {
		ts_log_severe "Task 2 was never scheduled"
	} elseif {[llength $qstat_plain_output1($jobid,jatask)] == 2} {
	   ts_log_severe "Task 2 is still around"
	} else {
		ts_log_fine "Task in system hold is still around as expected"
	}

	delete_all_jobs
   wait_for_end_of_all_jobs
}

proc check_qhold_jobname {} {
   global ts_config
   global CHECK_FIRST_FOREIGN_SYSTEM_USER
   global job_output_dir test_host

   # first clean up output directory:
   setup_output_directory

   # submit jobs, second one depends on FIRST one
   set jobargs "-h -l h=${test_host} -N FIRST -o $job_output_dir -e $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 90"
   set hold_job1 [submit_job $jobargs]

   set jobargs "-hold_jid FIRST -l h=${test_host} -o $job_output_dir -e $job_output_dir $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   set hold_job2 [submit_job $jobargs]

   # wait for jobs to get in pending state
   wait_for_jobpending $hold_job1 "FIRST" 200
   wait_for_jobpending $hold_job2 "Sleeper" 200

   # job 1 should not run within the next 60 seconds  (user hold)
   if {[wait_for_jobstart $hold_job1 "Sleeper" 60 0] != -1} {
      ts_log_severe "job $hold_job1 should not run until yet(1)"
   }

   # release job 1
   release_job $hold_job1
   wait_for_jobstart $hold_job1 "FIRST" 100

   # job 2 should not run within the next minute (dependency)
   if {[wait_for_jobstart $hold_job2 "Sleeper" 60 0] != -1} {
      ts_log_severe "job $hold_job2 should not run until yet(2)"
   }

   # job1 will stop in ca. 30 sec
   wait_for_jobend $hold_job1 "FIRST" 100 0

   # job2 should run now
   wait_for_jobstart $hold_job2 "Sleeper" 100

   # job2 should run till end
   wait_for_jobend $hold_job2 "Sleeper" 100 0

   set back [del_job_files $hold_job1 $job_output_dir 2]
   if {$back != 2} {
      ts_log_severe "job $hold_job1 did not produce error and output file"
   }

   set back [ del_job_files $hold_job2 $job_output_dir 2 ]
   if { $back != 2 } {
      ts_log_severe "job $hold_job2 did not produce error and output file"
   }

   ts_log_fine "Test wait for not existent job (job should immediately run)"
   set jobargs "-hold_jid FIRST -l h=${test_host} -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   set job_id [submit_job $jobargs]
   wait_for_jobstart $job_id "Sleeper" 60
   wait_for_jobend $job_id "Sleeper" 60 0

   ts_log_fine "additional job submit with same name test"
   set jobargs "-h -l h=${test_host} -N FIRST -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   set hold_job1 [submit_job $jobargs]

   ts_log_fine "additional job submit with same name test"
   set jobargs "-h -l h=${test_host} -N FIRST -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   set hold_job2 [submit_job $jobargs]

   wait_for_jobpending $hold_job1 "FIRST" 60
   wait_for_jobpending $hold_job2 "FIRST" 60

   set jobargs "-hold_jid FIRST -l h=${test_host} -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   set hold_job3 [submit_job $jobargs 0]
   if {$hold_job3 <= 0} {
      ts_log_severe "job $hold_job3 should depend on multiple jobs, selected by name"
   } else {
      ts_log_fine "submitted job with multiple predecessors selected by job name: $hold_job3 - correct"
   }

   delete_job $hold_job1

   ts_log_fine "submitting hold job ..."
   set jobargs "-hold_jid FIRST -l h=${test_host} -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   set hold_job3 [submit_job $jobargs]

   ts_log_fine "submitting job with same name (FIRST) ..."
   set jobargs "-h -l h=${test_host} -N FIRST -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   ts_log_fine $jobargs
   set hold_job1 [submit_job $jobargs 0]
   if {$hold_job1 <= 0} {
      ts_log_severe "job $hold_job1 should have been submitted - -N name is ok, even if job dependencies containing this name exist"
   } else {
      ts_log_fine "could submit job reusing jobname that is in use in a job dependency: $hold_job1 - correct"
   }

   delete_job $hold_job1
   delete_job $hold_job2
   delete_job $hold_job3

   # test foreign user influence ...
   ts_log_fine "checking hold for foreign user ..."
   ts_log_fine "submitting job with same name (FIRST) as user $CHECK_FIRST_FOREIGN_SYSTEM_USER ..."
   set jobargs "-h -l h=${test_host} -N FIRST -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   ts_log_fine $jobargs
   set hold_job1 [submit_job $jobargs 1 30 "" $CHECK_FIRST_FOREIGN_SYSTEM_USER]

   ts_log_fine "submitting hold job ..."
   set jobargs "-hold_jid FIRST -l h=${test_host} -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   set hold_job3 [submit_job $jobargs]

   wait_for_jobstart $hold_job3 "Sleeper" 75
   wait_for_jobend $hold_job3 "Sleeper" 75 0

   ts_log_fine "additional job submit with same name test"
   set jobargs "-h -l h=${test_host} -N FIRST -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   set hold_job2 [submit_job $jobargs]

   ts_log_fine "submitting hold job ..."
   set jobargs "-hold_jid FIRST -l h=${test_host} -o /dev/null -e /dev/null $ts_config(product_root)/examples/jobs/sleeper.sh 30"
   set hold_job3 [submit_job $jobargs]

   if {[wait_for_jobstart $hold_job3 "Sleeper" 60 0] != -1} {
      ts_log_severe "job $hold_job3 should not run until yet(3)"
   }

   delete_job $hold_job3
   delete_job $hold_job2

   release_job $hold_job1
   wait_for_jobstart $hold_job1 "FIRST" 60
   wait_for_jobend $hold_job1 "FIRST" 60 0
}

