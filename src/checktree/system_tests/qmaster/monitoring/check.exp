#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
#  Portions of this software are Copyright (c) 2023-2024 HPC-Gridware GmbH
#
##########################################################################
#___INFO__MARK_END__

#####################
#
# Test description:
#------------------
#
# - Tests the monitoring output for the messages file and qping
# - it tests:
#  - enabling monitoring
#  - disabling monitoring
#  - disabling monitoring by removing the monitoring param
#  - disabling monitoring for the message file
#  - enabling monitoring for the message file
#  - test if monitoring is started on a qmaster start
#

# define global variable in this namespace
global check_name 
global check_category 
global check_description 
global check_needs
global check_functions 
global check_root_access_needs

set check_root_access_needs "yes"

# define test's name and run level descriptions
set check_name            "qmaster_monitoring"
set check_category        "COMPATIBILITY SYSTEM VERIFIED"
set check_description(0)  "check qmaster monitoring"

# define test's dependencies
set check_needs           "init_core_system" 

# setup and cleanup functions
set check_setup_function qmaster_monitoring_setup
set check_cleanup_function qmaster_monitoring_cleanup

# define test's procedure order
set check_functions ""
lappend check_functions "qmaster_monitoring_dynamic"
lappend check_functions "qmaster_monitoring_restart"
lappend check_functions "qmaster_monitoring_dynamic_qping"
lappend check_functions "qmaster_monitoring_restart_qping"

# -------- local test procedures: initialization------------------------------
proc parse_monitor_tet { line } {
   set split_line [split $line ": ()|,"]

   set index 0

   foreach elem $split_line {
      ts_log_fine "<$index>:$elem"
      incr index 1
   }
}


proc qmaster_monitoring_setup  {} {
   global ts_config
   global global_config

   # backup global config - we'll change it
   ts_log_fine "backup global config"
   get_config global_config
}

proc qmaster_monitoring_cleanup  {} {
   global ts_config
   global global_config

   ts_log_fine "reset global config"
   reset_config global_config
}



proc qmaster_monitoring_monitor {id expected_prof qping {tail_timeout 20}} {
   global ts_config

   # some information output
   switch -exact $expected_prof {
      NONE {
         ts_log_fine "expecting that no monitoring message shows up the next $tail_timeout s"
      }
      CONSUME {
         ts_log_fine "consuming messages for $tail_timeout s"
      }
      default {
         ts_log_fine "expecting monitoring messages showing up within the next $tail_timeout s"
      }
   }

   # initialize counters for monitoring messages
   set prof(SIGNALERT) 0
   set prof(LISTENERT) 0
   set prof(DELIVERERT) 0
   set prof(TIMERT) 0

   # this is the spawn id of our tail to qmaster messages file
   set sp_id [lindex $id 1]

   # the time period we wait for messages
   set now [clock seconds]
   set end [expr $now + $tail_timeout]

   # message format changed in 9.0.0 (thread number is an extra field)
   if {[is_version_in_range "9.0.0"]} {
      # 05/16/2024 11:59:10|    listener|01|ubuntu-22-amd64-1|P|listener: runs: 0.17r/s (in (
      set level_idx 4
      set message_idx 5
   } else {
      set level_idx 3
      set message_idx 4
   }

   # wait until timeout
   while {$now < $end} {
      set timeout 1
      expect_user {
         -i $sp_id timeout {
            # output how long we'll still wait
            ts_log_fine "[expr $end -$now]\r"
         }
         -i $sp_id full_buffer {
            ts_log_severe "buffer overflow, please increase CHECK_EXPECT_MATCH_MAX_BUFFER"
         }
         -i $sp_id eof {
            ts_log_severe "unexpected eof"
         }
         -i $sp_id "?*\n" {
            # parse new lines in messages file
            #ts_log_fine "received new line in messages file"
            if {$qping} {
               foreach line [ string trim [split $expect_out(0,string) "\n"]] {
                  set line [string trim $line]
                  if {[string length $line] > 0} {
                     ts_log_fine "processing line: $line"
                     set split_line [split $line "|"]
                     set message [lindex $split_line 1]
                     switch -glob -- $message {
                        "*signaler*: runs*" {
                           incr prof(SIGNALERT)
                        }
                        "*listener*: runs*" {
                           incr prof(LISTENERT)
                           #parse_monitor_tet $message
                        }
                        "*event_master*: runs*" {
                           incr prof(DELIVERERT)
                           set tmp [lindex $split_line 2]
                           set message "$message $tmp"
                           #parse_monitor_tet $message
                        }
                        "*timer*: runs*" {
                           incr prof(TIMERT)
                           #parse_monitor_tet $message
                        }
                        default {
#     ts_log_fine "unknown monitoring message $message"
                        }
                     }
                  } ;# if
               } ;# foreach
            } else {
               foreach line [ string trim [split $expect_out(0,string) "\n"]] {
                  set line [string trim $line]
                  if {[string length $line] > 0} {
                     ts_log_fine "processing line: $line"
                     set split_line [split $line "|"]
                     set monitoring [lindex $split_line $level_idx]
                     set message [lindex $split_line $message_idx]
                     switch -glob -- $monitoring {
                        "P" {
                           switch -glob -- $message {
                              "signal*" -
                              "signaler*" {
                                 incr prof(SIGNALERT)
                              }
                              "listener*" {
                                 incr prof(LISTENERT)
                                 #parse_monitor_tet $message
                              }
                              "event master*" -
                              "event_master*" {
                                 incr prof(DELIVERERT)
                                 set tmp [lindex $split_line 5]
                                 set message "$message $tmp"
                                 #parse_monitor_tet $message
                              }
                              "timed event*" -
                              "timer*" {
                                 incr prof(TIMERT)
                                 #parse_monitor_tet $message
                              }
                              default {
                            #     ts_log_fine "unknown monitoring message $message"
                              }
                           }
                        }
                        default {
                        #   ts_log_fine "ignoring: [string range $line 0 50] ..."
                        }
                     } ;# switch
                  } ;# valid line
               } ;# foreach line  
            } ;
         } ;# data
      } ;# switch

      set now [clock seconds]
   } ;# while

   # some informational output
   ts_log_fine "SIGNALERT:  $prof(SIGNALERT)"
   ts_log_fine "LISTENERT:  $prof(LISTENERT)"
   ts_log_fine "DELIVERERT: $prof(DELIVERERT)"
   ts_log_fine "TIMERT:     $prof(TIMERT)"

   # now check for the expected result
   ts_log_fine "verifying results"
   switch -exact $expected_prof {
      NONE {
         # here we may not have received any monitoring messages
         set error 0
         set message "expected no monitoring message to show up, but got"
         set thread_name_string "SIGNALERT LISTENERT DELIVERERT TIMERT"
         foreach thread $thread_name_string {
            if {$prof($thread) > 0} {
               set error 1
               append message "\n$prof($thread) $thread monitoring messages"
            }
         }

         if {$error} {
            ts_log_severe $message
         }
      }
      CONSUME {
         # no check here
      }
      default {
         # here we shall have expected n messages for the requested thread, 
         # 0 messages for the other ones
         set error 0
         set message "expected $expected_prof monitoring messages to show up, but got"
         set thread_name_string "LISTENERT DELIVERERT TIMERT"
         foreach thread $thread_name_string {
            if {$prof($thread) == 0} {
               set error 1
               append message "\n$prof($thread) $thread monitoring messages"
            }
         }

         if {$error} {
            ts_log_severe $message
         }
      }
   }   
}


proc qmaster_monitoring_dynamic_qping {} {
   global ts_config
   global CHECK_FIRST_FOREIGN_SYSTEM_USER

   set ps_interval 4
   set qping_host $ts_config(master_host)
   set qping_arch [resolve_arch $qping_host]
   ts_log_fine "starting qping monitor on host $qping_host"
   set id [open_remote_spawn_process $qping_host $CHECK_FIRST_FOREIGN_SYSTEM_USER "$ts_config(product_root)/bin/$qping_arch/qping" "-i $ps_interval -f $ts_config(master_host) $ts_config(commd_port) qmaster 1"]
   
   # wait for monitoring messages - no such messages may show up
   qmaster_monitoring_monitor $id NONE 1

   set prof "MONITOR_TIME"
   
   ts_log_fine "testing monitoring $prof"

# 1)
# check, wether the monitoring works
#

   # switch on monitoring
   set global_conf(qmaster_params) "$prof=0:0:1"
   set_config global_conf

   # wait for monitoring messages for this thread
   qmaster_monitoring_monitor $id $prof 1

# 3)
# check, wether the log monitoring messages has no effect on qping output
#

   set global_conf(qmaster_params) "$prof=0:0:1,LOG_MONITOR_MESSAGE=false"
   set_config global_conf
   # consume monitoring messages that may have shown up while we switched monitoring off
   qmaster_monitoring_monitor $id $prof 1

   set global_conf(qmaster_params) "$prof=0:0:1,LOG_MONITOR_MESSAGE=true"
   set_config global_conf

   # wait for monitoring messages for this thread
   qmaster_monitoring_monitor $id $prof 1
   
# 4)
# check, wether the set to 0 turns the monitoring off
#
   
   # switch off monitoring
   set global_conf(qmaster_params) "$prof=0:0:0"
   set_config global_conf
   # consume monitoring messages that may have shown up while we switched monitoring off
   qmaster_monitoring_monitor $id CONSUME  1 10

   # no further message may appear
   qmaster_monitoring_monitor $id NONE 1

# 5)
# check, wether the NONE switch turns the monitoring off
#

   # switch on monitoring
   set global_conf(qmaster_params) "$prof=0:0:1"
   set_config global_conf

   # wait for monitoring messages for this thread
   qmaster_monitoring_monitor $id $prof 1

   set global_conf(qmaster_params) "NONE"
   set_config global_conf
   # consume monitoring messages that may have shown up while we switched monitoring off
   qmaster_monitoring_monitor $id CONSUME 1 10

   # no further message may appear
   qmaster_monitoring_monitor $id NONE 1


   
   # stop the tail -f
   close_spawn_process $id
}

proc qmaster_monitoring_dynamic {} {
   global ts_config

   # tail -f to qmaster messages file
   ts_log_fine "tail -f to qmaster messages file"
   set spooldir [get_qmaster_spool_dir]
   set id [init_logfile_wait $ts_config(master_host) "$spooldir/messages"]

   
   # wait for monitoring messages - no such messages may show up
   qmaster_monitoring_monitor $id NONE 0

   set prof "MONITOR_TIME"
   
   ts_log_fine "testing monitoring $prof"

# 1)
# check, wether the monitoring works
#
   # switch on monitoring
   set global_conf(qmaster_params) "$prof=0:0:1"
   set_config global_conf

   # wait for monitoring messages for this thread
   qmaster_monitoring_monitor $id $prof 0

# 2)
# check, wether the log monitoring message to false turns the messages off
#

   set global_conf(qmaster_params) "$prof=0:0:1,LOG_MONITOR_MESSAGE=false"
   set_config global_conf
   # consume monitoring messages that may have shown up while we switched monitoring off
   qmaster_monitoring_monitor $id CONSUME  0 10

   # no further message may appear
   qmaster_monitoring_monitor $id NONE 0

# 3)
# check, wether the log monitoring messages to true turns the messages on
#

   set global_conf(qmaster_params) "$prof=0:0:1,LOG_MONITOR_MESSAGE=true"
   set_config global_conf

   # wait for monitoring messages for this thread
   qmaster_monitoring_monitor $id $prof 0

# 4)
# check, wether the set to 0 turns the monitoring off
#

   # switch off monitoring
   set global_conf(qmaster_params) "$prof=0:0:0"
   set_config global_conf
   # consume monitoring messages that may have shown up while we switched monitoring off
   qmaster_monitoring_monitor $id CONSUME  0 10

   # no further message may appear
   qmaster_monitoring_monitor $id NONE 0

# 5)
# check, wether the NONE switch turns the monitoring off
#

   # switch on monitoring
   set global_conf(qmaster_params) "$prof=0:0:1"
   set_config global_conf

   # wait for monitoring messages for this thread
   qmaster_monitoring_monitor $id $prof 0

   set global_conf(qmaster_params) "NONE"
   set_config global_conf
   # consume monitoring messages that may have shown up while we switched monitoring off
   qmaster_monitoring_monitor $id CONSUME  0 10

   # no further message may appear
   qmaster_monitoring_monitor $id NONE 0
   
# done, shutdown test

   # stop the tail -f
   close_spawn_process $id
}



proc qmaster_monitoring_restart {} {
   global ts_config

   # tail -f to qmaster messages file
   ts_log_fine "tail -f to qmaster messages file"
   set spooldir [get_qmaster_spool_dir]
   set id [init_logfile_wait $ts_config(master_host) "$spooldir/messages"]

   # enable some monitoring level
   set global_conf(qmaster_params) "MONITOR_TIME=0:0:1"
   set_config global_conf

   # wait for monitoring messages to show up
   qmaster_monitoring_monitor $id LISTENERT 0

   # shutdown qmaster
   shutdown_qmaster $ts_config(master_host) $spooldir

   # restart qmaster
   startup_qmaster 0

   # wait for monitoring messages
   qmaster_monitoring_monitor $id LISTENERT 0
   
   # switch off monitoring
   set global_conf(qmaster_params) "MONITOR_TIME=0:0:0"
   set_config global_conf
   # consume monitoring messages that may have shown up while we switched monitoring off
   qmaster_monitoring_monitor $id CONSUME 0 10

   # no further message may appear
   qmaster_monitoring_monitor $id NONE 0

   # stop the tail -f
   close_spawn_process $id
}

proc qmaster_monitoring_restart_qping {} {
   global ts_config
   global CHECK_FIRST_FOREIGN_SYSTEM_USER

   set spooldir [get_qmaster_spool_dir]

   set ps_interval 4
   set qping_host $ts_config(master_host)
   set qping_arch [resolve_arch $qping_host]
   ts_log_fine "starting qping monitor on host $qping_host"
   set id [open_remote_spawn_process $qping_host $CHECK_FIRST_FOREIGN_SYSTEM_USER "$ts_config(product_root)/bin/$qping_arch/qping" "-i $ps_interval -f $ts_config(master_host) $ts_config(commd_port) qmaster 1"]
      
   # enable some monitoring level
   set global_conf(qmaster_params) "MONITOR_TIME=0:0:1"
   set_config global_conf

   # wait for monitoring messages to show up
   qmaster_monitoring_monitor $id LISTENERT 1

   # shutdown qmaster
   shutdown_qmaster $ts_config(master_host) $spooldir

   # restart qmaster
   startup_qmaster 0

   # wait for monitoring messages
   qmaster_monitoring_monitor $id LISTENERT 1

   # switch off monitoring
   set global_conf(qmaster_params) "MONITOR_TIME=0:0:0"
   set_config global_conf
   # consume monitoring messages that may have shown up while we switched monitoring off
   qmaster_monitoring_monitor $id CONSUME 1 10

   # no further message may appear
   qmaster_monitoring_monitor $id NONE 1

   # stop the tail -f
   close_spawn_process $id
}

